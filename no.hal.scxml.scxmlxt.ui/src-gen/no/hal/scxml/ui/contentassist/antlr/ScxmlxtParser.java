/*
* generated by Xtext
*/
package no.hal.scxml.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import no.hal.scxml.services.ScxmlxtGrammarAccess;

public class ScxmlxtParser extends AbstractContentAssistParser {
	
	@Inject
	private ScxmlxtGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected no.hal.scxml.ui.contentassist.antlr.internal.InternalScxmlxtParser createParser() {
		no.hal.scxml.ui.contentassist.antlr.internal.InternalScxmlxtParser result = new no.hal.scxml.ui.contentassist.antlr.internal.InternalScxmlxtParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStateMachineAccess().getAlternatives_1(), "rule__StateMachine__Alternatives_1");
					put(grammarAccess.getResourceImportAccess().getAlternatives(), "rule__ResourceImport__Alternatives");
					put(grammarAccess.getStateAccess().getAlternatives_2(), "rule__State__Alternatives_2");
					put(grammarAccess.getStateAccess().getAlternatives_2_1_1(), "rule__State__Alternatives_2_1_1");
					put(grammarAccess.getAbstractStateAccess().getAlternatives(), "rule__AbstractState__Alternatives");
					put(grammarAccess.getAbstractTransitionAccess().getAlternatives(), "rule__AbstractTransition__Alternatives");
					put(grammarAccess.getTransitionAccess().getAlternatives_0(), "rule__Transition__Alternatives_0");
					put(grammarAccess.getEventAccess().getAlternatives(), "rule__Event__Alternatives");
					put(grammarAccess.getTransitionEventAccess().getAlternatives(), "rule__TransitionEvent__Alternatives");
					put(grammarAccess.getTransitionEventAccess().getAlternatives_0(), "rule__TransitionEvent__Alternatives_0");
					put(grammarAccess.getTransitionEventAccess().getAlternatives_1(), "rule__TransitionEvent__Alternatives_1");
					put(grammarAccess.getTransitionEventAccess().getAlternatives_2(), "rule__TransitionEvent__Alternatives_2");
					put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
					put(grammarAccess.getVarDefAccess().getManyAlternatives_2_2_0(), "rule__VarDef__ManyAlternatives_2_2_0");
					put(grammarAccess.getBOOLEAN_LITERALAccess().getAlternatives(), "rule__BOOLEAN_LITERAL__Alternatives");
					put(grammarAccess.getFLOAT_LITERALAccess().getAlternatives_0(), "rule__FLOAT_LITERAL__Alternatives_0");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getIntLiteralAccess().getIntValueAlternatives_0(), "rule__IntLiteral__IntValueAlternatives_0");
					put(grammarAccess.getTimeUnitAccess().getAlternatives(), "rule__TimeUnit__Alternatives");
					put(grammarAccess.getStateMachineAccess().getGroup(), "rule__StateMachine__Group__0");
					put(grammarAccess.getDomainModelImportAccess().getGroup(), "rule__DomainModelImport__Group__0");
					put(grammarAccess.getDomainDataImportAccess().getGroup(), "rule__DomainDataImport__Group__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getStateAccess().getGroup_2_1(), "rule__State__Group_2_1__0");
					put(grammarAccess.getInitialTransitionAccess().getGroup(), "rule__InitialTransition__Group__0");
					put(grammarAccess.getInitialTransitionAccess().getGroup_2(), "rule__InitialTransition__Group_2__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup_0_0(), "rule__Transition__Group_0_0__0");
					put(grammarAccess.getTransitionAccess().getGroup_0_1(), "rule__Transition__Group_0_1__0");
					put(grammarAccess.getTransitionAccess().getGroup_1(), "rule__Transition__Group_1__0");
					put(grammarAccess.getTransitionAccess().getGroup_2(), "rule__Transition__Group_2__0");
					put(grammarAccess.getTransitionAccess().getGroup_3(), "rule__Transition__Group_3__0");
					put(grammarAccess.getInternalTransitionAccess().getGroup(), "rule__InternalTransition__Group__0");
					put(grammarAccess.getInternalTransitionAccess().getGroup_0(), "rule__InternalTransition__Group_0__0");
					put(grammarAccess.getInternalTransitionAccess().getGroup_1(), "rule__InternalTransition__Group_1__0");
					put(grammarAccess.getSymbolicEventAccess().getGroup(), "rule__SymbolicEvent__Group__0");
					put(grammarAccess.getTransitionEventAccess().getGroup_0_0(), "rule__TransitionEvent__Group_0_0__0");
					put(grammarAccess.getTransitionEventAccess().getGroup_0_1(), "rule__TransitionEvent__Group_0_1__0");
					put(grammarAccess.getTransitionEventAccess().getGroup_1_0(), "rule__TransitionEvent__Group_1_0__0");
					put(grammarAccess.getTransitionEventAccess().getGroup_1_1(), "rule__TransitionEvent__Group_1_1__0");
					put(grammarAccess.getTransitionEventAccess().getGroup_2_0(), "rule__TransitionEvent__Group_2_0__0");
					put(grammarAccess.getTransitionEventAccess().getGroup_2_1(), "rule__TransitionEvent__Group_2_1__0");
					put(grammarAccess.getEnterEventAccess().getGroup(), "rule__EnterEvent__Group__0");
					put(grammarAccess.getExitEventAccess().getGroup(), "rule__ExitEvent__Group__0");
					put(grammarAccess.getTimerEventAccess().getGroup(), "rule__TimerEvent__Group__0");
					put(grammarAccess.getSymbolicActionAccess().getGroup(), "rule__SymbolicAction__Group__0");
					put(grammarAccess.getSymbolicActionAccess().getGroup_1(), "rule__SymbolicAction__Group_1__0");
					put(grammarAccess.getVarDefAccess().getGroup(), "rule__VarDef__Group__0");
					put(grammarAccess.getVarDefAccess().getGroup_2(), "rule__VarDef__Group_2__0");
					put(grammarAccess.getVarDefAccess().getGroup_3(), "rule__VarDef__Group_3__0");
					put(grammarAccess.getAssignmentActionAccess().getGroup(), "rule__AssignmentAction__Group__0");
					put(grammarAccess.getFLOAT_LITERALAccess().getGroup(), "rule__FLOAT_LITERAL__Group__0");
					put(grammarAccess.getPOS_INTAccess().getGroup(), "rule__POS_INT__Group__0");
					put(grammarAccess.getNEG_INTAccess().getGroup(), "rule__NEG_INT__Group__0");
					put(grammarAccess.getQNAMEAccess().getGroup(), "rule__QNAME__Group__0");
					put(grammarAccess.getQNAMEAccess().getGroup_1(), "rule__QNAME__Group_1__0");
					put(grammarAccess.getDelayLiteralAccess().getGroup(), "rule__DelayLiteral__Group__0");
					put(grammarAccess.getEPathAccess().getGroup(), "rule__EPath__Group__0");
					put(grammarAccess.getEStepAccess().getGroup(), "rule__EStep__Group__0");
					put(grammarAccess.getStateMachineAccess().getImportsAssignment_0(), "rule__StateMachine__ImportsAssignment_0");
					put(grammarAccess.getStateMachineAccess().getStatesAssignment_1_0(), "rule__StateMachine__StatesAssignment_1_0");
					put(grammarAccess.getStateMachineAccess().getTransitionsAssignment_1_1(), "rule__StateMachine__TransitionsAssignment_1_1");
					put(grammarAccess.getStateMachineAccess().getVariablesAssignment_1_2(), "rule__StateMachine__VariablesAssignment_1_2");
					put(grammarAccess.getDomainModelImportAccess().getImportURIAssignment_2(), "rule__DomainModelImport__ImportURIAssignment_2");
					put(grammarAccess.getDomainDataImportAccess().getImportURIAssignment_2(), "rule__DomainDataImport__ImportURIAssignment_2");
					put(grammarAccess.getStateAccess().getInitialTransitionAssignment_0(), "rule__State__InitialTransitionAssignment_0");
					put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
					put(grammarAccess.getStateAccess().getStatesAssignment_2_1_1_0(), "rule__State__StatesAssignment_2_1_1_0");
					put(grammarAccess.getStateAccess().getTransitionsAssignment_2_1_1_1(), "rule__State__TransitionsAssignment_2_1_1_1");
					put(grammarAccess.getStateAccess().getVariablesAssignment_2_1_1_2(), "rule__State__VariablesAssignment_2_1_1_2");
					put(grammarAccess.getInitialTransitionAccess().getActionAssignment_2_1(), "rule__InitialTransition__ActionAssignment_2_1");
					put(grammarAccess.getTransitionAccess().getTargetAssignment_0_0_1(), "rule__Transition__TargetAssignment_0_0_1");
					put(grammarAccess.getTransitionAccess().getTargetAssignment_0_1_0(), "rule__Transition__TargetAssignment_0_1_0");
					put(grammarAccess.getTransitionAccess().getEventAssignment_1_1(), "rule__Transition__EventAssignment_1_1");
					put(grammarAccess.getTransitionAccess().getConditionAssignment_2_1(), "rule__Transition__ConditionAssignment_2_1");
					put(grammarAccess.getTransitionAccess().getActionAssignment_3_1(), "rule__Transition__ActionAssignment_3_1");
					put(grammarAccess.getInternalTransitionAccess().getEventAssignment_0_1(), "rule__InternalTransition__EventAssignment_0_1");
					put(grammarAccess.getInternalTransitionAccess().getConditionAssignment_1_1(), "rule__InternalTransition__ConditionAssignment_1_1");
					put(grammarAccess.getInternalTransitionAccess().getActionAssignment_3(), "rule__InternalTransition__ActionAssignment_3");
					put(grammarAccess.getSymbolicEventAccess().getNameAssignment_0(), "rule__SymbolicEvent__NameAssignment_0");
					put(grammarAccess.getTransitionEventAccess().getSourceAssignment_0_0_0(), "rule__TransitionEvent__SourceAssignment_0_0_0");
					put(grammarAccess.getTransitionEventAccess().getTargetAssignment_0_0_2(), "rule__TransitionEvent__TargetAssignment_0_0_2");
					put(grammarAccess.getTransitionEventAccess().getTargetAssignment_0_1_0(), "rule__TransitionEvent__TargetAssignment_0_1_0");
					put(grammarAccess.getTransitionEventAccess().getSourceAssignment_0_1_2(), "rule__TransitionEvent__SourceAssignment_0_1_2");
					put(grammarAccess.getTransitionEventAccess().getTargetAssignment_1_0_1(), "rule__TransitionEvent__TargetAssignment_1_0_1");
					put(grammarAccess.getTransitionEventAccess().getTargetAssignment_1_1_0(), "rule__TransitionEvent__TargetAssignment_1_1_0");
					put(grammarAccess.getTransitionEventAccess().getSourceAssignment_2_0_0(), "rule__TransitionEvent__SourceAssignment_2_0_0");
					put(grammarAccess.getTransitionEventAccess().getSourceAssignment_2_1_1(), "rule__TransitionEvent__SourceAssignment_2_1_1");
					put(grammarAccess.getScriptEventAccess().getScriptAssignment(), "rule__ScriptEvent__ScriptAssignment");
					put(grammarAccess.getTimerEventAccess().getDelayAssignment_2(), "rule__TimerEvent__DelayAssignment_2");
					put(grammarAccess.getTimerEventAccess().getEventAssignment_4(), "rule__TimerEvent__EventAssignment_4");
					put(grammarAccess.getConditionAccess().getScriptAssignment(), "rule__Condition__ScriptAssignment");
					put(grammarAccess.getSymbolicActionAccess().getNameAssignment_0(), "rule__SymbolicAction__NameAssignment_0");
					put(grammarAccess.getSymbolicActionAccess().getDelayAssignment_1_1(), "rule__SymbolicAction__DelayAssignment_1_1");
					put(grammarAccess.getScriptActionAccess().getScriptAssignment(), "rule__ScriptAction__ScriptAssignment");
					put(grammarAccess.getVarDefAccess().getNameAssignment_1(), "rule__VarDef__NameAssignment_1");
					put(grammarAccess.getVarDefAccess().getETypeAssignment_2_1(), "rule__VarDef__ETypeAssignment_2_1");
					put(grammarAccess.getVarDefAccess().getManyAssignment_2_2(), "rule__VarDef__ManyAssignment_2_2");
					put(grammarAccess.getVarDefAccess().getInitAssignment_3_1(), "rule__VarDef__InitAssignment_3_1");
					put(grammarAccess.getAssignmentActionAccess().getVarAssignment_0(), "rule__AssignmentAction__VarAssignment_0");
					put(grammarAccess.getAssignmentActionAccess().getValueAssignment_2(), "rule__AssignmentAction__ValueAssignment_2");
					put(grammarAccess.getBooleanLiteralAccess().getBooleanValueAssignment(), "rule__BooleanLiteral__BooleanValueAssignment");
					put(grammarAccess.getIntLiteralAccess().getIntValueAssignment(), "rule__IntLiteral__IntValueAssignment");
					put(grammarAccess.getFloatLiteralAccess().getFloatValueAssignment(), "rule__FloatLiteral__FloatValueAssignment");
					put(grammarAccess.getStringLiteralAccess().getStringValueAssignment(), "rule__StringLiteral__StringValueAssignment");
					put(grammarAccess.getUriLiteralAccess().getUriAssignment(), "rule__UriLiteral__UriAssignment");
					put(grammarAccess.getEObjectUriLiteralAccess().getUriAssignment(), "rule__EObjectUriLiteral__UriAssignment");
					put(grammarAccess.getDelayLiteralAccess().getIntValueAssignment_0(), "rule__DelayLiteral__IntValueAssignment_0");
					put(grammarAccess.getDelayLiteralAccess().getTimeUnitAssignment_1(), "rule__DelayLiteral__TimeUnitAssignment_1");
					put(grammarAccess.getVarRefAccess().getVarAssignment(), "rule__VarRef__VarAssignment");
					put(grammarAccess.getEPathAccess().getVarAssignment_0(), "rule__EPath__VarAssignment_0");
					put(grammarAccess.getEPathAccess().getStepsAssignment_1(), "rule__EPath__StepsAssignment_1");
					put(grammarAccess.getEStepAccess().getFeatureNameAssignment_1(), "rule__EStep__FeatureNameAssignment_1");
					put(grammarAccess.getEStepAccess().getFilterAssignment_2(), "rule__EStep__FilterAssignment_2");
					put(grammarAccess.getEStepFilterAccess().getScriptAssignment(), "rule__EStepFilter__ScriptAssignment");
					put(grammarAccess.getScriptExpressionAccess().getScriptAssignment(), "rule__ScriptExpression__ScriptAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			no.hal.scxml.ui.contentassist.antlr.internal.InternalScxmlxtParser typedParser = (no.hal.scxml.ui.contentassist.antlr.internal.InternalScxmlxtParser) parser;
			typedParser.entryRuleStateMachine();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ScxmlxtGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ScxmlxtGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
