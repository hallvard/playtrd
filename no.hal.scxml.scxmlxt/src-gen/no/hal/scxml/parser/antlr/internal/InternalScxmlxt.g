/*
* generated by Xtext
*/
grammar InternalScxmlxt;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package no.hal.scxml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package no.hal.scxml.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import no.hal.scxml.services.ScxmlxtGrammarAccess;

}

@parser::members {

 	private ScxmlxtGrammarAccess grammarAccess;
 	
    public InternalScxmlxtParser(TokenStream input, IAstFactory factory, ScxmlxtGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("no/hal/scxml/parser/antlr/internal/InternalScxmlxt.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "StateMachine";	
   	}
   	
   	@Override
   	protected ScxmlxtGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleStateMachine
entryRuleStateMachine returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStateMachineRule(), currentNode); }
	 iv_ruleStateMachine=ruleStateMachine 
	 { $current=$iv_ruleStateMachine.current; } 
	 EOF 
;

// Rule StateMachine
ruleStateMachine returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateMachineAccess().getImportsResourceImportParserRuleCall_0_0(), currentNode); 
	    }
		lv_imports_0_0=ruleResourceImport		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateMachineRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"imports",
	        		lv_imports_0_0, 
	        		"ResourceImport", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateMachineAccess().getStatesStateParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_states_1_0=ruleState		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateMachineRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"states",
	        		lv_states_1_0, 
	        		"State", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateMachineAccess().getTransitionsAbstractTransitionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_transitions_2_0=ruleAbstractTransition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateMachineRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"transitions",
	        		lv_transitions_2_0, 
	        		"AbstractTransition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateMachineAccess().getVariablesVarDefParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_variables_3_0=ruleVarDef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateMachineRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variables",
	        		lv_variables_3_0, 
	        		"VarDef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleResourceImport
entryRuleResourceImport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getResourceImportRule(), currentNode); }
	 iv_ruleResourceImport=ruleResourceImport 
	 { $current=$iv_ruleResourceImport.current; } 
	 EOF 
;

// Rule ResourceImport
ruleResourceImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getResourceImportAccess().getDomainModelImportParserRuleCall_0(), currentNode); 
    }
    this_DomainModelImport_0=ruleDomainModelImport
    { 
        $current = $this_DomainModelImport_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getResourceImportAccess().getDomainDataImportParserRuleCall_1(), currentNode); 
    }
    this_DomainDataImport_1=ruleDomainDataImport
    { 
        $current = $this_DomainDataImport_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleDomainModelImport
entryRuleDomainModelImport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDomainModelImportRule(), currentNode); }
	 iv_ruleDomainModelImport=ruleDomainModelImport 
	 { $current=$iv_ruleDomainModelImport.current; } 
	 EOF 
;

// Rule DomainModelImport
ruleDomainModelImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'domain' 
    {
        createLeafNode(grammarAccess.getDomainModelImportAccess().getDomainKeyword_0(), null); 
    }
)?	'model' 
    {
        createLeafNode(grammarAccess.getDomainModelImportAccess().getModelKeyword_1(), null); 
    }
(
(
		lv_importURI_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getDomainModelImportAccess().getImportURISTRINGTerminalRuleCall_2_0(), "importURI"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDomainModelImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"importURI",
	        		lv_importURI_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getDomainModelImportAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleDomainDataImport
entryRuleDomainDataImport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDomainDataImportRule(), currentNode); }
	 iv_ruleDomainDataImport=ruleDomainDataImport 
	 { $current=$iv_ruleDomainDataImport.current; } 
	 EOF 
;

// Rule DomainDataImport
ruleDomainDataImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'domain' 
    {
        createLeafNode(grammarAccess.getDomainDataImportAccess().getDomainKeyword_0(), null); 
    }
)?	'data' 
    {
        createLeafNode(grammarAccess.getDomainDataImportAccess().getDataKeyword_1(), null); 
    }
(
(
		lv_importURI_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getDomainDataImportAccess().getImportURISTRINGTerminalRuleCall_2_0(), "importURI"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDomainDataImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"importURI",
	        		lv_importURI_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getDomainDataImportAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStateRule(), currentNode); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getInitialTransitionInitialTransitionParserRuleCall_0_0(), currentNode); 
	    }
		lv_initialTransition_0_0=ruleInitialTransition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initialTransition",
	        		lv_initialTransition_0_0, 
	        		"InitialTransition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	';' 
    {
        createLeafNode(grammarAccess.getStateAccess().getSemicolonKeyword_2_0(), null); 
    }

    |(	'{' 
    {
        createLeafNode(grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_2_1_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getStatesStateParserRuleCall_2_1_1_0_0(), currentNode); 
	    }
		lv_states_4_0=ruleState		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"states",
	        		lv_states_4_0, 
	        		"State", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getTransitionsAbstractTransitionParserRuleCall_2_1_1_1_0(), currentNode); 
	    }
		lv_transitions_5_0=ruleAbstractTransition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"transitions",
	        		lv_transitions_5_0, 
	        		"AbstractTransition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getVariablesVarDefParserRuleCall_2_1_1_2_0(), currentNode); 
	    }
		lv_variables_6_0=ruleVarDef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variables",
	        		lv_variables_6_0, 
	        		"VarDef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getStateAccess().getRightCurlyBracketKeyword_2_1_2(), null); 
    }
)))
;





// Entry rule entryRuleInitialTransition
entryRuleInitialTransition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInitialTransitionRule(), currentNode); }
	 iv_ruleInitialTransition=ruleInitialTransition 
	 { $current=$iv_ruleInitialTransition.current; } 
	 EOF 
;

// Rule InitialTransition
ruleInitialTransition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getInitialTransitionAccess().getInitialTransitionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInitialTransitionAccess().getInitialTransitionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'->' 
    {
        createLeafNode(grammarAccess.getInitialTransitionAccess().getHyphenMinusGreaterThanSignKeyword_1(), null); 
    }
(	'do' 
    {
        createLeafNode(grammarAccess.getInitialTransitionAccess().getDoKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInitialTransitionAccess().getActionActionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_action_3_0=ruleAction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitialTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"action",
	        		lv_action_3_0, 
	        		"Action", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;







// Entry rule entryRuleAbstractTransition
entryRuleAbstractTransition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAbstractTransitionRule(), currentNode); }
	 iv_ruleAbstractTransition=ruleAbstractTransition 
	 { $current=$iv_ruleAbstractTransition.current; } 
	 EOF 
;

// Rule AbstractTransition
ruleAbstractTransition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractTransitionAccess().getTransitionParserRuleCall_0(), currentNode); 
    }
    this_Transition_0=ruleTransition
    { 
        $current = $this_Transition_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAbstractTransitionAccess().getInternalTransitionParserRuleCall_1(), currentNode); 
    }
    this_InternalTransition_1=ruleInternalTransition
    { 
        $current = $this_InternalTransition_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTransitionRule(), currentNode); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((	'->' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_0_0_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getTargetStateCrossReference_0_0_1_0(), currentNode); 
	    }
		ruleQNAME		{ 
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getTargetStateCrossReference_0_1_0_0(), currentNode); 
	    }
		ruleQNAME		{ 
	        currentNode = currentNode.getParent();
	    }

)
)	'<-' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getLessThanSignHyphenMinusKeyword_0_1_1(), null); 
    }
))(	'on' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getOnKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getEventEventParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_event_5_0=ruleEvent		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"event",
	        		lv_event_5_0, 
	        		"Event", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'if' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getIfKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getConditionConditionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_condition_7_0=ruleCondition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_7_0, 
	        		"Condition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'do' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getDoKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getActionActionParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_action_9_0=ruleAction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"action",
	        		lv_action_9_0, 
	        		"Action", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleInternalTransition
entryRuleInternalTransition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInternalTransitionRule(), currentNode); }
	 iv_ruleInternalTransition=ruleInternalTransition 
	 { $current=$iv_ruleInternalTransition.current; } 
	 EOF 
;

// Rule InternalTransition
ruleInternalTransition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'on' 
    {
        createLeafNode(grammarAccess.getInternalTransitionAccess().getOnKeyword_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInternalTransitionAccess().getEventEventParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_event_1_0=ruleEvent		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInternalTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"event",
	        		lv_event_1_0, 
	        		"Event", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'if' 
    {
        createLeafNode(grammarAccess.getInternalTransitionAccess().getIfKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInternalTransitionAccess().getConditionConditionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_condition_3_0=ruleCondition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInternalTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_3_0, 
	        		"Condition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	'do' 
    {
        createLeafNode(grammarAccess.getInternalTransitionAccess().getDoKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInternalTransitionAccess().getActionActionParserRuleCall_3_0(), currentNode); 
	    }
		lv_action_5_0=ruleAction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInternalTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"action",
	        		lv_action_5_0, 
	        		"Action", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getInternalTransitionAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEventRule(), currentNode); }
	 iv_ruleEvent=ruleEvent 
	 { $current=$iv_ruleEvent.current; } 
	 EOF 
;

// Rule Event
ruleEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getEventAccess().getSymbolicEventParserRuleCall_0(), currentNode); 
    }
    this_SymbolicEvent_0=ruleSymbolicEvent
    { 
        $current = $this_SymbolicEvent_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEventAccess().getTransitionEventParserRuleCall_1(), currentNode); 
    }
    this_TransitionEvent_1=ruleTransitionEvent
    { 
        $current = $this_TransitionEvent_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEventAccess().getEnterEventParserRuleCall_2(), currentNode); 
    }
    this_EnterEvent_2=ruleEnterEvent
    { 
        $current = $this_EnterEvent_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEventAccess().getExitEventParserRuleCall_3(), currentNode); 
    }
    this_ExitEvent_3=ruleExitEvent
    { 
        $current = $this_ExitEvent_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEventAccess().getScriptEventParserRuleCall_4(), currentNode); 
    }
    this_ScriptEvent_4=ruleScriptEvent
    { 
        $current = $this_ScriptEvent_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEventAccess().getTimerEventParserRuleCall_5(), currentNode); 
    }
    this_TimerEvent_5=ruleTimerEvent
    { 
        $current = $this_TimerEvent_5.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSymbolicEvent
entryRuleSymbolicEvent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSymbolicEventRule(), currentNode); }
	 iv_ruleSymbolicEvent=ruleSymbolicEvent 
	 { $current=$iv_ruleSymbolicEvent.current; } 
	 EOF 
;

// Rule SymbolicEvent
ruleSymbolicEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSymbolicEventAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSymbolicEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'!' 
    {
        createLeafNode(grammarAccess.getSymbolicEventAccess().getExclamationMarkKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleTransitionEvent
entryRuleTransitionEvent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTransitionEventRule(), currentNode); }
	 iv_ruleTransitionEvent=ruleTransitionEvent 
	 { $current=$iv_ruleTransitionEvent.current; } 
	 EOF 
;

// Rule TransitionEvent
ruleTransitionEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionEventAccess().getSourceStateCrossReference_0_0_0_0(), currentNode); 
	    }
		ruleQNAME		{ 
	        currentNode = currentNode.getParent();
	    }

)
)	'->' 
    {
        createLeafNode(grammarAccess.getTransitionEventAccess().getHyphenMinusGreaterThanSignKeyword_0_0_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionEventAccess().getTargetStateCrossReference_0_0_2_0(), currentNode); 
	    }
		ruleQNAME		{ 
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionEventAccess().getTargetStateCrossReference_0_1_0_0(), currentNode); 
	    }
		ruleQNAME		{ 
	        currentNode = currentNode.getParent();
	    }

)
)	'<-' 
    {
        createLeafNode(grammarAccess.getTransitionEventAccess().getLessThanSignHyphenMinusKeyword_0_1_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionEventAccess().getSourceStateCrossReference_0_1_2_0(), currentNode); 
	    }
		ruleQNAME		{ 
	        currentNode = currentNode.getParent();
	    }

)
)))
    |((	'->' 
    {
        createLeafNode(grammarAccess.getTransitionEventAccess().getHyphenMinusGreaterThanSignKeyword_1_0_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionEventAccess().getTargetStateCrossReference_1_0_1_0(), currentNode); 
	    }
		ruleQNAME		{ 
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionEventAccess().getTargetStateCrossReference_1_1_0_0(), currentNode); 
	    }
		ruleQNAME		{ 
	        currentNode = currentNode.getParent();
	    }

)
)	'<-' 
    {
        createLeafNode(grammarAccess.getTransitionEventAccess().getLessThanSignHyphenMinusKeyword_1_1_1(), null); 
    }
))
    |(((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionEventAccess().getSourceStateCrossReference_2_0_0_0(), currentNode); 
	    }
		ruleQNAME		{ 
	        currentNode = currentNode.getParent();
	    }

)
)	'->' 
    {
        createLeafNode(grammarAccess.getTransitionEventAccess().getHyphenMinusGreaterThanSignKeyword_2_0_1(), null); 
    }
)
    |(	'<-' 
    {
        createLeafNode(grammarAccess.getTransitionEventAccess().getLessThanSignHyphenMinusKeyword_2_1_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionEventAccess().getSourceStateCrossReference_2_1_1_0(), currentNode); 
	    }
		ruleQNAME		{ 
	        currentNode = currentNode.getParent();
	    }

)
))))
;





// Entry rule entryRuleEnterEvent
entryRuleEnterEvent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnterEventRule(), currentNode); }
	 iv_ruleEnterEvent=ruleEnterEvent 
	 { $current=$iv_ruleEnterEvent.current; } 
	 EOF 
;

// Rule EnterEvent
ruleEnterEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getEnterEventAccess().getEnterEventAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getEnterEventAccess().getEnterEventAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'enter' 
    {
        createLeafNode(grammarAccess.getEnterEventAccess().getEnterKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleExitEvent
entryRuleExitEvent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExitEventRule(), currentNode); }
	 iv_ruleExitEvent=ruleExitEvent 
	 { $current=$iv_ruleExitEvent.current; } 
	 EOF 
;

// Rule ExitEvent
ruleExitEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getExitEventAccess().getExitEventAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getExitEventAccess().getExitEventAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'exit' 
    {
        createLeafNode(grammarAccess.getExitEventAccess().getExitKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleScriptEvent
entryRuleScriptEvent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getScriptEventRule(), currentNode); }
	 iv_ruleScriptEvent=ruleScriptEvent 
	 { $current=$iv_ruleScriptEvent.current; } 
	 EOF 
;

// Rule ScriptEvent
ruleScriptEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_script_0_0=RULE_SCRIPT_EXPRESSION
		{
			createLeafNode(grammarAccess.getScriptEventAccess().getScriptSCRIPT_EXPRESSIONTerminalRuleCall_0(), "script"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getScriptEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"script",
	        		lv_script_0_0, 
	        		"SCRIPT_EXPRESSION", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleTimerEvent
entryRuleTimerEvent returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTimerEventRule(), currentNode); }
	 iv_ruleTimerEvent=ruleTimerEvent 
	 { $current=$iv_ruleTimerEvent.current; } 
	 EOF 
;

// Rule TimerEvent
ruleTimerEvent returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	't' 
    {
        createLeafNode(grammarAccess.getTimerEventAccess().getTKeyword_0(), null); 
    }
	'>' 
    {
        createLeafNode(grammarAccess.getTimerEventAccess().getGreaterThanSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTimerEventAccess().getDelayExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_delay_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTimerEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"delay",
	        		lv_delay_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'after' 
    {
        createLeafNode(grammarAccess.getTimerEventAccess().getAfterKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTimerEventAccess().getEventEventParserRuleCall_4_0(), currentNode); 
	    }
		lv_event_4_0=ruleEvent		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTimerEventRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"event",
	        		lv_event_4_0, 
	        		"Event", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConditionRule(), currentNode); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_script_0_0=RULE_SCRIPT_EXPRESSION
		{
			createLeafNode(grammarAccess.getConditionAccess().getScriptSCRIPT_EXPRESSIONTerminalRuleCall_0(), "script"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"script",
	        		lv_script_0_0, 
	        		"SCRIPT_EXPRESSION", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getActionRule(), currentNode); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getActionAccess().getSymbolicActionParserRuleCall_0(), currentNode); 
    }
    this_SymbolicAction_0=ruleSymbolicAction
    { 
        $current = $this_SymbolicAction_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getActionAccess().getScriptActionParserRuleCall_1(), currentNode); 
    }
    this_ScriptAction_1=ruleScriptAction
    { 
        $current = $this_ScriptAction_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getActionAccess().getAssignmentActionParserRuleCall_2(), currentNode); 
    }
    this_AssignmentAction_2=ruleAssignmentAction
    { 
        $current = $this_AssignmentAction_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSymbolicAction
entryRuleSymbolicAction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSymbolicActionRule(), currentNode); }
	 iv_ruleSymbolicAction=ruleSymbolicAction 
	 { $current=$iv_ruleSymbolicAction.current; } 
	 EOF 
;

// Rule SymbolicAction
ruleSymbolicAction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSymbolicActionAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSymbolicActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'after' 
    {
        createLeafNode(grammarAccess.getSymbolicActionAccess().getAfterKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSymbolicActionAccess().getDelayExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_delay_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSymbolicActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"delay",
	        		lv_delay_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	'!' 
    {
        createLeafNode(grammarAccess.getSymbolicActionAccess().getExclamationMarkKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleScriptAction
entryRuleScriptAction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getScriptActionRule(), currentNode); }
	 iv_ruleScriptAction=ruleScriptAction 
	 { $current=$iv_ruleScriptAction.current; } 
	 EOF 
;

// Rule ScriptAction
ruleScriptAction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_script_0_0=RULE_SCRIPT_STATEMENTS
		{
			createLeafNode(grammarAccess.getScriptActionAccess().getScriptSCRIPT_STATEMENTSTerminalRuleCall_0(), "script"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getScriptActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"script",
	        		lv_script_0_0, 
	        		"SCRIPT_STATEMENTS", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleVarDef
entryRuleVarDef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVarDefRule(), currentNode); }
	 iv_ruleVarDef=ruleVarDef 
	 { $current=$iv_ruleVarDef.current; } 
	 EOF 
;

// Rule VarDef
ruleVarDef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'var' 
    {
        createLeafNode(grammarAccess.getVarDefAccess().getVarKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getVarDefAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getVarDefAccess().getColonKeyword_2_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getVarDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVarDefAccess().getETypeEClassifierCrossReference_2_1_0(), currentNode); 
	    }
		ruleQNAME		{ 
	        currentNode = currentNode.getParent();
	    }

)
)(
(
(
		lv_many_4_1=	'*' 
    {
        createLeafNode(grammarAccess.getVarDefAccess().getManyAsteriskKeyword_2_2_0_0(), "many"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "many", true, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_many_4_2=	'[]' 
    {
        createLeafNode(grammarAccess.getVarDefAccess().getManyLeftSquareBracketRightSquareBracketKeyword_2_2_0_1(), "many"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "many", true, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)?)?(	'=' 
    {
        createLeafNode(grammarAccess.getVarDefAccess().getEqualsSignKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVarDefAccess().getInitExpressionParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_init_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVarDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"init",
	        		lv_init_6_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getVarDefAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleAssignmentAction
entryRuleAssignmentAction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentActionRule(), currentNode); }
	 iv_ruleAssignmentAction=ruleAssignmentAction 
	 { $current=$iv_ruleAssignmentAction.current; } 
	 EOF 
;

// Rule AssignmentAction
ruleAssignmentAction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentActionAccess().getVarVarDefCrossReference_0_0(), currentNode); 
	    }
		ruleQNAME		{ 
	        currentNode = currentNode.getParent();
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getAssignmentActionAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentActionAccess().getValueExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentActionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleBOOLEAN_LITERAL
entryRuleBOOLEAN_LITERAL returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBOOLEAN_LITERALRule(), currentNode); } 
	 iv_ruleBOOLEAN_LITERAL=ruleBOOLEAN_LITERAL 
	 { $current=$iv_ruleBOOLEAN_LITERAL.current.getText(); }  
	 EOF 
;

// Rule BOOLEAN_LITERAL
ruleBOOLEAN_LITERAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='true' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBOOLEAN_LITERALAccess().getTrueKeyword_0(), null); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBOOLEAN_LITERALAccess().getFalseKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleFLOAT_LITERAL
entryRuleFLOAT_LITERAL returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFLOAT_LITERALRule(), currentNode); } 
	 iv_ruleFLOAT_LITERAL=ruleFLOAT_LITERAL 
	 { $current=$iv_ruleFLOAT_LITERAL.current.getText(); }  
	 EOF 
;

// Rule FLOAT_LITERAL
ruleFLOAT_LITERAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
((    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getFLOAT_LITERALAccess().getINTTerminalRuleCall_0_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getFLOAT_LITERALAccess().getPOS_INTParserRuleCall_0_1(), currentNode); 
    }
    this_POS_INT_1=rulePOS_INT    {
		$current.merge(this_POS_INT_1);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getFLOAT_LITERALAccess().getNEG_INTParserRuleCall_0_2(), currentNode); 
    }
    this_NEG_INT_2=ruleNEG_INT    {
		$current.merge(this_NEG_INT_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getFLOAT_LITERALAccess().getFullStopKeyword_1(), null); 
    }
    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    createLeafNode(grammarAccess.getFLOAT_LITERALAccess().getINTTerminalRuleCall_2(), null); 
    }
)
    ;





// Entry rule entryRulePOS_INT
entryRulePOS_INT returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPOS_INTRule(), currentNode); } 
	 iv_rulePOS_INT=rulePOS_INT 
	 { $current=$iv_rulePOS_INT.current.getText(); }  
	 EOF 
;

// Rule POS_INT
rulePOS_INT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPOS_INTAccess().getPlusSignKeyword_0(), null); 
    }
    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getPOS_INTAccess().getINTTerminalRuleCall_1(), null); 
    }
)
    ;





// Entry rule entryRuleNEG_INT
entryRuleNEG_INT returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNEG_INTRule(), currentNode); } 
	 iv_ruleNEG_INT=ruleNEG_INT 
	 { $current=$iv_ruleNEG_INT.current.getText(); }  
	 EOF 
;

// Rule NEG_INT
ruleNEG_INT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNEG_INTAccess().getHyphenMinusKeyword_0(), null); 
    }
    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    createLeafNode(grammarAccess.getNEG_INTAccess().getINTTerminalRuleCall_1(), null); 
    }
)
    ;





// Entry rule entryRuleQNAME
entryRuleQNAME returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQNAMERule(), currentNode); } 
	 iv_ruleQNAME=ruleQNAME 
	 { $current=$iv_ruleQNAME.current.getText(); }  
	 EOF 
;

// Rule QNAME
ruleQNAME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getQNAMEAccess().getIDTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQNAMEAccess().getFullStopKeyword_1_0(), null); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    createLeafNode(grammarAccess.getQNAMEAccess().getIDTerminalRuleCall_1_1(), null); 
    }
)*)
    ;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getLiteralParserRuleCall_0(), currentNode); 
    }
    this_Literal_0=ruleLiteral
    { 
        $current = $this_Literal_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getScriptExpressionParserRuleCall_1(), currentNode); 
    }
    this_ScriptExpression_1=ruleScriptExpression
    { 
        $current = $this_ScriptExpression_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getEPathParserRuleCall_2(), currentNode); 
    }
    this_EPath_2=ruleEPath
    { 
        $current = $this_EPath_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralRule(), currentNode); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0(), currentNode); 
    }
    this_BooleanLiteral_0=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getFloatLiteralParserRuleCall_1(), currentNode); 
    }
    this_FloatLiteral_1=ruleFloatLiteral
    { 
        $current = $this_FloatLiteral_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getIntLiteralParserRuleCall_2(), currentNode); 
    }
    this_IntLiteral_2=ruleIntLiteral
    { 
        $current = $this_IntLiteral_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_3(), currentNode); 
    }
    this_StringLiteral_3=ruleStringLiteral
    { 
        $current = $this_StringLiteral_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getUriLiteralParserRuleCall_4(), currentNode); 
    }
    this_UriLiteral_4=ruleUriLiteral
    { 
        $current = $this_UriLiteral_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getEObjectUriLiteralParserRuleCall_5(), currentNode); 
    }
    this_EObjectUriLiteral_5=ruleEObjectUriLiteral
    { 
        $current = $this_EObjectUriLiteral_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLiteralAccess().getDelayLiteralParserRuleCall_6(), currentNode); 
    }
    this_DelayLiteral_6=ruleDelayLiteral
    { 
        $current = $this_DelayLiteral_6.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanLiteralRule(), currentNode); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBooleanLiteralAccess().getBooleanValueBOOLEAN_LITERALParserRuleCall_0(), currentNode); 
	    }
		lv_booleanValue_0_0=ruleBOOLEAN_LITERAL		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"booleanValue",
	        		lv_booleanValue_0_0, 
	        		"BOOLEAN_LITERAL", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleIntLiteral
entryRuleIntLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntLiteralRule(), currentNode); }
	 iv_ruleIntLiteral=ruleIntLiteral 
	 { $current=$iv_ruleIntLiteral.current; } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
(
		lv_intValue_0_1=RULE_INT
		{
			createLeafNode(grammarAccess.getIntLiteralAccess().getIntValueINTTerminalRuleCall_0_0(), "intValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"intValue",
	        		lv_intValue_0_1, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getIntLiteralAccess().getIntValuePOS_INTParserRuleCall_0_1(), currentNode); 
	    }
		lv_intValue_0_2=rulePOS_INT		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"intValue",
	        		lv_intValue_0_2, 
	        		"POS_INT", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getIntLiteralAccess().getIntValueNEG_INTParserRuleCall_0_2(), currentNode); 
	    }
		lv_intValue_0_3=ruleNEG_INT		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"intValue",
	        		lv_intValue_0_3, 
	        		"NEG_INT", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)
;





// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFloatLiteralRule(), currentNode); }
	 iv_ruleFloatLiteral=ruleFloatLiteral 
	 { $current=$iv_ruleFloatLiteral.current; } 
	 EOF 
;

// Rule FloatLiteral
ruleFloatLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFloatLiteralAccess().getFloatValueFLOAT_LITERALParserRuleCall_0(), currentNode); 
	    }
		lv_floatValue_0_0=ruleFLOAT_LITERAL		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFloatLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"floatValue",
	        		lv_floatValue_0_0, 
	        		"FLOAT_LITERAL", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringLiteralRule(), currentNode); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_stringValue_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getStringLiteralAccess().getStringValueSTRINGTerminalRuleCall_0(), "stringValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"stringValue",
	        		lv_stringValue_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleUriLiteral
entryRuleUriLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUriLiteralRule(), currentNode); }
	 iv_ruleUriLiteral=ruleUriLiteral 
	 { $current=$iv_ruleUriLiteral.current; } 
	 EOF 
;

// Rule UriLiteral
ruleUriLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_uri_0_0=RULE_URI_LITERAL
		{
			createLeafNode(grammarAccess.getUriLiteralAccess().getUriURI_LITERALTerminalRuleCall_0(), "uri"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUriLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"uri",
	        		lv_uri_0_0, 
	        		"URI_LITERAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleEObjectUriLiteral
entryRuleEObjectUriLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEObjectUriLiteralRule(), currentNode); }
	 iv_ruleEObjectUriLiteral=ruleEObjectUriLiteral 
	 { $current=$iv_ruleEObjectUriLiteral.current; } 
	 EOF 
;

// Rule EObjectUriLiteral
ruleEObjectUriLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_uri_0_0=RULE_EOBJECT_URI_LITERAL
		{
			createLeafNode(grammarAccess.getEObjectUriLiteralAccess().getUriEOBJECT_URI_LITERALTerminalRuleCall_0(), "uri"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEObjectUriLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"uri",
	        		lv_uri_0_0, 
	        		"EOBJECT_URI_LITERAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleDelayLiteral
entryRuleDelayLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDelayLiteralRule(), currentNode); }
	 iv_ruleDelayLiteral=ruleDelayLiteral 
	 { $current=$iv_ruleDelayLiteral.current; } 
	 EOF 
;

// Rule DelayLiteral
ruleDelayLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_intValue_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getDelayLiteralAccess().getIntValueINTTerminalRuleCall_0_0(), "intValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDelayLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"intValue",
	        		lv_intValue_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDelayLiteralAccess().getTimeUnitTimeUnitEnumRuleCall_1_0(), currentNode); 
	    }
		lv_timeUnit_1_0=ruleTimeUnit		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDelayLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"timeUnit",
	        		lv_timeUnit_1_0, 
	        		"TimeUnit", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleVarRef
entryRuleVarRef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVarRefRule(), currentNode); }
	 iv_ruleVarRef=ruleVarRef 
	 { $current=$iv_ruleVarRef.current; } 
	 EOF 
;

// Rule VarRef
ruleVarRef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getVarRefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVarRefAccess().getVarVarDefCrossReference_0(), currentNode); 
	    }
		ruleQNAME		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleEPath
entryRuleEPath returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEPathRule(), currentNode); }
	 iv_ruleEPath=ruleEPath 
	 { $current=$iv_ruleEPath.current; } 
	 EOF 
;

// Rule EPath
ruleEPath returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEPathAccess().getVarVarRefParserRuleCall_0_0(), currentNode); 
	    }
		lv_var_0_0=ruleVarRef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEPathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"var",
	        		lv_var_0_0, 
	        		"VarRef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEPathAccess().getStepsEStepParserRuleCall_1_0(), currentNode); 
	    }
		lv_steps_1_0=ruleEStep		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEPathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"steps",
	        		lv_steps_1_0, 
	        		"EStep", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleEStep
entryRuleEStep returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEStepRule(), currentNode); }
	 iv_ruleEStep=ruleEStep 
	 { $current=$iv_ruleEStep.current; } 
	 EOF 
;

// Rule EStep
ruleEStep returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'/ ' 
    {
        createLeafNode(grammarAccess.getEStepAccess().getSolidusSpaceKeyword_0(), null); 
    }
(
(
		lv_featureName_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEStepAccess().getFeatureNameIDTerminalRuleCall_1_0(), "featureName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEStepRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"featureName",
	        		lv_featureName_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEStepAccess().getFilterEStepFilterParserRuleCall_2_0(), currentNode); 
	    }
		lv_filter_2_0=ruleEStepFilter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEStepRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"filter",
	        		lv_filter_2_0, 
	        		"EStepFilter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleEStepFilter
entryRuleEStepFilter returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEStepFilterRule(), currentNode); }
	 iv_ruleEStepFilter=ruleEStepFilter 
	 { $current=$iv_ruleEStepFilter.current; } 
	 EOF 
;

// Rule EStepFilter
ruleEStepFilter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEStepFilterAccess().getScriptScriptExpressionParserRuleCall_0(), currentNode); 
	    }
		lv_script_0_0=ruleScriptExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEStepFilterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"script",
	        		lv_script_0_0, 
	        		"ScriptExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleScriptExpression
entryRuleScriptExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getScriptExpressionRule(), currentNode); }
	 iv_ruleScriptExpression=ruleScriptExpression 
	 { $current=$iv_ruleScriptExpression.current; } 
	 EOF 
;

// Rule ScriptExpression
ruleScriptExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_script_0_0=RULE_SCRIPT_EXPRESSION
		{
			createLeafNode(grammarAccess.getScriptExpressionAccess().getScriptSCRIPT_EXPRESSIONTerminalRuleCall_0(), "script"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getScriptExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"script",
	        		lv_script_0_0, 
	        		"SCRIPT_EXPRESSION", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Rule TimeUnit
ruleTimeUnit returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'ms' 
	{
        $current = grammarAccess.getTimeUnitAccess().getMsEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTimeUnitAccess().getMsEnumLiteralDeclaration_0(), null); 
    }
)
    |(	's' 
	{
        $current = grammarAccess.getTimeUnitAccess().getSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTimeUnitAccess().getSEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'm' 
	{
        $current = grammarAccess.getTimeUnitAccess().getMEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTimeUnitAccess().getMEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'h' 
	{
        $current = grammarAccess.getTimeUnitAccess().getHEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTimeUnitAccess().getHEnumLiteralDeclaration_3(), null); 
    }
));



RULE_SCRIPT_EXPRESSION : '[[' ( options {greedy=false;} : . )*']]';

RULE_SCRIPT_STATEMENTS : '{{' ( options {greedy=false;} : . )*'}}';

RULE_URI_LITERAL : '@' ('a'..'z'|'A'..'Z'|'0'..'9'|':'|'_'|'-'|'+'|'.'|'/'|'#'|'?'|'='|'&'|'%'|'@'|'$')+;

RULE_EOBJECT_URI_LITERAL : '\u20AC' ('a'..'z'|'A'..'Z'|'0'..'9'|':'|'_'|'-'|'+'|'.'|'/'|'#'|'?'|'='|'&'|'%'|'@'|'$')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


